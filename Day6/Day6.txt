사용자 정의 함수(function)
하나의 특별한 목적의 작업을 수행하도록 설계된 독립적인 블록을 의미합니다. 함수는 필요할 때마다 호출하여 해당 작업을 반복해서 수행하기 때문에 코드를 재활용할 수 있습니다.

1. 이름만 존재하는 함수

- 함수 선언식
function 함수명(){
    함수가 호출되었을 때 실행할 문장;
    ...
}

- 함수 표현식
const 함수명 = function(){
    함수가 호출되었을 때 실행할 문장;
    ...
}

함수명();

* 자바스크립트는 함수를 변수에 저장이 가능
* 자바스크립트는 script 태그를 만나면 자바스크립트 파일을 먼저 읽고 선언된 함수를 먼저 메모리에 저장

호이스팅
함수 선언식으로 선언된 함수는 메모리에 미리 저장이 되기 때문에 위치에 관계없이 에러가 발생되지 않습니다. 따라서 함수 선언식은 "호이스팅이 된다"라고 표현합니다.


2. 매개변수가 있는 함수

- 함수 선언식
function 함수명(매개변수1, 매개변수2 ..){
    함수가 호출되었을 때 실행할 문장;
    ...
}

- 함수 표현식
const 함수명 = function(매개변수1, 매개변수2 ..){
    함수가 호출되었을 때 실행할 문장;
    ...
}

함수명(값1, 값2 ...);

- 디폴트 매개변수
매개변수의 값을 정하지 않으면 대신 기본값을 변수에 저장

function 함수명(매개변수1=값1, 매개변수2=값2, ..){
    함수가 호출되었을 때 실행할 문장;
    ...
}

- 나머지 매개변수
생략 접두사(...)를 사용하여 특정 위치의 인수부터 마지막 인수까지 한번에 지정할 수 있습니다.

function 함수명(매개변수1, 매개변수2, ...매개변수3){
    함수가 호출되었을 때 실행할 문장;
    ...
}

함수명(10, 20, 30, 40, 50, 60, 70);


3. 리턴값이 있는 함수

function 함수명(매개변수1, 매개변수2 ..){
    함수가 호출되었을 때 실행할 문장;
    ...
    return 값;
}

const 상수 = 함수명(값1, 값2 ..);


문제.
두 수를 입력받아 덧셈, 뺄셈, 곱셈, 나눗셈을 계산하는 프로그램을 작성
(단, 함수는 연산 각각 작성, 모두 return 타입으로 작성)

예시
첫번째 숫자를 입력하세요 10
두번째 숫자를 입력하세요 5

10 + 5 = 15
10 - 5 = 5
10 * 5 = 50
10 / 5 = 2


화살표 함수
function 키워드를 사용하여 함수를 만드는 것보다 간단하게 표현합니다. 화살표 함수는 항상 익명입니다.

const 함수명 = (매개변수1, 매개변수2 ..) => 실행문 ..

1. 매개변수가 없는 함수

const func1 = function() {
    console.log('안녕하세요, JavaScript!');
}

화살표 함수로 표현
const func1 = () => console.log('안녕하세요, JavaScript!');


2. 매개변수가 있는 함수
const func2 = x => console.log(`매개변수로 전달받은 값 : ${x}`);
const func2 = (x, y) => console.log(`두수의 합 : ${x + y}`);

3. 리턴값이 있는 함수
const func3 = (x, y) => {
    let sum = 0;
    for(let i=x; i<=y; i++){
        sum += i;
    }
    
}

